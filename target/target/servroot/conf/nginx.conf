worker_processes  1;
daemon on;
master_process off;
error_log /t/servroot/logs/error.log debug;
pid       /t/servroot/logs/nginx.pid;
env MOCKEAGAIN_VERBOSE;
env MOCKEAGAIN;
env MOCKEAGAIN_WRITE_TIMEOUT_PATTERN;
env LD_PRELOAD;
env LD_LIBRARY_PATH;
env DYLD_INSERT_LIBRARIES;
#env LUA_PATH;
#env LUA_CPATH;



http {
    access_log /t/servroot/logs/access.log;
    #access_log off;

    default_type text/plain;
    keepalive_timeout  68;

    # lua_package_path "//scripts/?.lua;;";
    lua_package_path 'src/lua/?.lua;;';
    lua_package_cpath 'src/lua/?.so;;';
    init_by_lua '
        local v = require "jit.v"
        v.on("/t/servroot/logs/error.log")
        require "resty.core"
    ';
    resolver 192.168.0.1;

    client_body_temp_path /tmp/;
    proxy_temp_path /tmp/;
    fastcgi_temp_path /tmp/;


    server {
        listen          1989;
        server_name     'localhost';

        client_max_body_size 30M;
        #client_body_buffer_size 4k;

        # Begin preamble config...

        # End preamble config...

        # Begin test case config...
        error_log ../lambda_test1_error.log debug;

        location = /latest/meta-data/iam/security-credentials/ {
            return 200 'test-iam-user';
        }

        location = /latest/meta-data/iam/security-credentials/test-iam-user {
            set_by_lua $expiration '
                            local offset = os.time() - os.time(os.date("!*t"))
                            return os.date("%Y-%m-%dT%H:%M:%SZ", os.time() + math.abs(offset) + 20)
                        ';
            return 200 '{
                          "Code" : "Success",
                          "LastUpdated" : "2014-11-03T01:56:20Z",
                          "Type" : "AWS-HMAC",
                          "AccessKeyId" : "",
                          "SecretAccessKey" : "",
                          "Token" : "",
                          "Expiration" : "$expiration"
                        }';
        }

        location /test {
            set $aws_access_key ;
            set $aws_secret_key ;
            set $aws_region us-east-1;
            set $aws_service kms;

            content_by_lua '
                ngx.say("NOTE: THIS TEST EXPECTS THE hello-world-test FUNCTION TO EXIST, ACCEPTING {key1:k1,key2:k2} AS PAYLOAD")
                local LambdaService = require "api-gateway.aws.lambda.LambdaService"
                local cjson = require "cjson"

                local service = LambdaService:new({
                    security_credentials_host = "127.0.0.1",
                    security_credentials_port = 1989,
                    aws_region = ngx.var.aws_region,
                    aws_debug = true,              -- print warn level messages on the nginx logs
                    aws_conn_keepalive = 60000,    -- how long to keep the sockets used for AWS alive
                    aws_conn_pool = 100            -- the connection pool size for sockets used to connect to AWS
                })

                -- TODO: find a function that starts with hello-world
                local functionName = "hello-world-test"
                local result, code, headers, status, body = service:listFunctions()

                if ( result.Functions == nil ) then
                   ngx.say("EXECUTION RESULT: no function named <hello-world> found. Please define one from the hello-world blueprint when executing this test")
                   ngx.log(ngx.DEBUG, "No functions defined. Response body=", tostring(body))
                end

                local functs = result.Functions
                for key,value in pairs(functs) do
                    functionName = tostring(value.FunctionName)
                    if ( string.find(functionName, "hello") ~= nil ) then
                        break
                    end
                end

                ngx.say("INVOKING FUNCTION:" .. tostring(functionName))

                -- invoke the hello-world function
                local payload = {
                    key1 = "value-1",
                    key2 = "value-2"
                }
                local context = {}
                context.identity = {}
                context.identity.accountId = tostring(ngx.var.oauth_token_user_id)
                local context_json = cjson.encode(context)
                local invokeResult, code, headers, status, body  = service:invoke(functionName, payload,context_json)
                if (code == 200) then
                    ngx.say("EXECUTION RESULT:" .. tostring(body))
                else
                    ngx.say(tostring(body))
                end

                -- TODO: delete the hello-world function

            ';
        }

        # End test case config.

        location / {
            root /t/servroot/html;
            index index.html index.htm;
        }
    }
}



#timer_resolution 100ms;

events {
    accept_mutex off;

    worker_connections  64;
}
